CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+"
HUFFMAN_TREE = {
  "0": 34,
  "1": 90,
  "2": 74,
  "3": 112,
  "4": 46,
  "5": 104,
  "6": 82,
  "7": 120,
  "8": 42,
  "9": 95,
  "10": 78,
  "11": 116,
  "12": 66,
  "13": 108,
  "14": 86,
  "15": 125,
  "16": 40,
  "17": 93,
  "18": 76,
  "19": 114,
  "20": 48,
  "21": 106,
  "22": 84,
  "23": 122,
  "24": 44,
  "25": 98,
  "26": 80,
  "27": 118,
  "28": 72,
  "29": 110,
  "30": 88,
  "31": 127,
  "32": 35,
  "33": 92,
  "34": 75,
  "35": 113,
  "36": 47,
  "37": 105,
  "38": 83,
  "39": 121,
  "40": 43,
  "41": 97,
  "42": 79,
  "43": 117,
  "44": 67,
  "45": 109,
  "46": 87,
  "47": 126,
  "48": 41,
  "49": 94,
  "50": 77,
  "51": 115,
  "52": 65,
  "53": 107,
  "54": 85,
  "55": 124,
  "56": 45,
  "57": 99,
  "58": 81,
  "59": 119,
  "60": 73,
  "61": 111,
  "62": 89,
  "63": 256,
}


def byte_to_bits(byte):
  return [(byte >> i) & 1 for i in range(8)]


def bits_to_byte(bits):
  return sum(b << i for i, b in enumerate(bits))


def average_bit_count(s: bytes):
  return sum(c.bit_count() for c in s) / len(s)
